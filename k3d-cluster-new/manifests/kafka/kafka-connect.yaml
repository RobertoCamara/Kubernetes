apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-connect
  namespace: kafka
  labels:
    app: kafka-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-connect
  template:
    metadata:
      labels:
        app: kafka-connect
    spec:
      initContainers:
        - name: create-kafka-topics
          image: kafka-connect-custom:local
          command:
            - /bin/bash
            - -c
            - |
              echo "‚è≥ Waiting for Kafka broker to be ready..."
              while ! nc -z kafka.kafka.svc.cluster.local 9092; do sleep 3; done
              echo "üì¶ Creating topics with cleanup.policy=compact"
              kafka-topics --bootstrap-server kafka.kafka.svc.cluster.local:9092 --create --if-not-exists --topic connect-configs --partitions 1 --replication-factor 1 --config cleanup.policy=compact
              kafka-topics --bootstrap-server kafka.kafka.svc.cluster.local:9092 --create --if-not-exists --topic connect-offsets --partitions 1 --replication-factor 1 --config cleanup.policy=compact
              kafka-topics --bootstrap-server kafka.kafka.svc.cluster.local:9092 --create --if-not-exists --topic connect-status --partitions 1 --replication-factor 1 --config cleanup.policy=compact
              kafka-topics --bootstrap-server kafka.kafka.svc.cluster.local:9092 --create --if-not-exists --topic __consumer_offsets --partitions 50 --replication-factor 1 --config cleanup.policy=compact
      containers:
        - name: kafka-connect
          image: kafka-connect-custom:local
          ports:
            - containerPort: 8083
          env:
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: "kafka.kafka.svc.cluster.local:9092"
            - name: CONNECT_REST_PORT
              value: "8083"
            - name: CONNECT_GROUP_ID
              value: "connectcluster"
            - name: CONNECT_CONFIG_STORAGE_TOPIC
              value: "connect-configs"
            - name: CONNECT_OFFSET_STORAGE_TOPIC
              value: "connect-offsets"
            - name: CONNECT_STATUS_STORAGE_TOPIC
              value: "connect-status"
            - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: CONNECT_KEY_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: CONNECT_VALUE_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: CONNECT_INTERNAL_KEY_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: CONNECT_INTERNAL_VALUE_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: CONNECT_REST_ADVERTISED_HOST_NAME
              value: "kafka-connect.kafka.svc.cluster.local"
            - name: CONNECT_REST_ADVERTISED_PORT
              value: "8083"
            - name: CONNECT_LOG4J_ROOT_LOGLEVEL
              value: "DEBUG"
            - name: CONNECT_LISTENERS
              value: "http://0.0.0.0:8083"
            #- name: CONNECT_REST_ADVERTISED_LISTENER
            #  value: "http://kafka-connect:8083"
            - name: CONNECT_REST_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          readinessProbe:
            httpGet:
              path: /connectors
              port: 8083
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /connectors
              port: 8083
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-connect
  namespace: kafka
spec:
  type: NodePort
  selector:
    app: kafka-connect
  ports:
    - name: rest
      port: 8083
      targetPort: 8083
      nodePort: 30083
